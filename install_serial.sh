#!/usr/bin/env bash
# serial port installation script by DJ0ABR
set -euo pipefail

if [[ "$(pwd -P)" != "/opt/OpenDVM" ]]; then
  echo "Please clone the repo in directory: /opt" >&2
  exit 1
fi

# --- Root/Sudo Handling -------------------------------------------------------
need_root() {
  if [[ $EUID -ne 0 ]]; then
    echo "[*] Not running as root. Checking/activating sudo ..."
    if ! sudo -v; then
      echo "[-] sudo not available or authentication canceled."
      exit 1
    fi
  else
    echo "[*] Running as root."
  fi
}

write_root_file() {
  local content="$1" path="$2"
  if [[ $EUID -eq 0 ]]; then
    printf "%s\n" "$content" > "$path"
  else
    printf "%s\n" "$content" | sudo tee "$path" >/dev/null
  fi
}

run_root_cmd() {
  if [[ $EUID -eq 0 ]]; then
    "$@"
  else
    sudo "$@"
  fi
}

# Ensure sudo is ready right away
need_root

# --- Device discovery (incl. common TTYs, deduplicated) -----------------------
echo "[*] Scanning for serial devices ..."
shopt -s nullglob

declare -a CANDS=()
declare -A SEEN_REAL   # key = realpath

append_if_exists() {
  local pat f real
  for pat in "$@"; do
    for f in $pat; do
      real="$(readlink -f "$f" || echo "$f")"
      if [[ -z "${SEEN_REAL[$real]+x}" ]]; then
        CANDS+=("$f")
        SEEN_REAL["$real"]=1
      fi
    done
  done
}

# 1) Prefer stable by-id paths
append_if_exists /dev/serial/by-id/*

# 2) Common serial ports (USB/ACM/RPi/SoC/PC UARTs)
append_if_exists \
  /dev/ttyUSB* \
  /dev/ttyACM* \
  /dev/ttyAMA* \
  /dev/ttyTHS* \
  /dev/ttyS[0-3]

if [[ ${#CANDS[@]} -eq 0 ]]; then
  echo "[-] No serial devices found."
  exit 1
fi

echo "[*] Found:"
i=1; for c in "${CANDS[@]}"; do echo "  $i) $c"; ((i++)); done
read -rp "[?] Select device (number, default 1): " sel
sel=${sel:-1}
PORT="${CANDS[$((sel-1))]}"
PORT_REAL="$(readlink -f "$PORT" || echo "$PORT")"
echo "[+] Selected: $PORT (-> $PORT_REAL)"

# --- Always: persistent udev rule for /dev/mmdvm (with group/permissions) -----
RULE_FILE="/etc/udev/rules.d/90-mmdvm.rules"
TTY_GROUP="dialout"     # Debian/Ubuntu default; keep consistent with install_mm.sh
TTY_MODE="0660"

echo "[*] Creating persistent udev rule for /dev/mmdvm (no prompt) ..."
PROPS="$(udevadm info -q property -n "$PORT_REAL" 2>/dev/null || true)"
ID_SERIAL="$(printf "%s\n" "$PROPS" | awk -F= '/^ID_SERIAL=/{print substr($0,index($0,"=")+1)}')"

RULE=""
if [[ -n "$ID_SERIAL" ]]; then
  RULE='SUBSYSTEM=="tty", ENV{ID_SERIAL}=="'"$ID_SERIAL"'", SYMLINK+="mmdvm", GROUP="'"$TTY_GROUP"'", MODE="'"$TTY_MODE"'"'
  echo "[+] Matching via ENV{ID_SERIAL}=$ID_SERIAL"
else
  ATTRS_DUMP="$(udevadm info -a -n "$PORT_REAL" 2>/dev/null || true)"
  idVendor="$(printf "%s\n" "$ATTRS_DUMP" | awk -F'==' '/ATTRS{idVendor}/ {gsub(/"/,"",$2); print $2; exit}')"
  idProduct="$(printf "%s\n" "$ATTRS_DUMP" | awk -F'==' '/ATTRS{idProduct}/ {gsub(/"/,"",$2); print $2; exit}')"
  ser="$(printf "%s\n" "$ATTRS_DUMP" | awk -F'==' '/ATTRS{serial}/ {gsub(/"/,"",$2); print $2; exit}')"

  if [[ -n "$idVendor" && -n "$idProduct" ]]; then
    RULE='SUBSYSTEM=="tty", ATTRS{idVendor}=="'"$idVendor"'", ATTRS{idProduct}=="'"$idProduct"'"'
    if [[ -n "$ser" ]]; then
      RULE+=', ATTRS{serial}=="'"$ser"'"'
    fi
    RULE+=', SYMLINK+="mmdvm", GROUP="'"$TTY_GROUP"'", MODE="'"$TTY_MODE"'"'
    echo "[+] Matching via USB IDs (idVendor=$idVendor idProduct=$idProduct${ser:+ serial=$ser})"
  else
    kernel_name="$(basename "$PORT_REAL")"
    RULE='KERNEL=="'"$kernel_name"'", SYMLINK+="mmdvm", GROUP="'"$TTY_GROUP"'", MODE="'"$TTY_MODE"'"'
    echo "[+] Matching via KERNEL==$kernel_name (onboard UART)"
  fi
fi

echo "[*] Writing rule to $RULE_FILE"
write_root_file "# Auto-generated by install_serial.sh on $(date -Iseconds)
# Remove or edit if the device changes
$RULE
" "$RULE_FILE"

echo "[*] Reloading udev and triggering device ..."
run_root_cmd udevadm control --reload-rules
if [[ -L /dev/mmdvm || -e /dev/mmdvm ]]; then
  run_root_cmd rm -f /dev/mmdvm || true
fi
if [[ -n "$ID_SERIAL" ]]; then
  run_root_cmd udevadm trigger --subsystem-match=tty --attr-match=serial="$ID_SERIAL" || true
  run_root_cmd udevadm trigger --subsystem-match=tty || true
else
  run_root_cmd udevadm trigger --subsystem-match=tty || true
fi
run_root_cmd udevadm settle || true

for _ in {1..10}; do
  [[ -e /dev/mmdvm ]] && break
  sleep 0.2
done

if [[ -e /dev/mmdvm ]]; then
  echo "[âœ“] Done: /dev/mmdvm -> $(readlink -f /dev/mmdvm)"
else
  echo "[!] Note: /dev/mmdvm not created yet."
  echo "    Try replugging the device or run: sudo udevadm trigger -s tty"
  echo "    Rule file: $RULE_FILE"
fi
